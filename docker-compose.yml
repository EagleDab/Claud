services:
  db:
    image: postgres:15-alpine
    container_name: price_monitor_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-price_monitor}
      POSTGRES_USER: ${POSTGRES_USER:-price_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-price_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -U ${POSTGRES_USER:-price_user} -d ${POSTGRES_DB:-price_monitor}"
      ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: price_monitor_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: bot-playwright
    container_name: price_monitor_bot
    command: python -m bot.main
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/app
      - browser_cache:/app/.cache
    restart: unless-stopped

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: bot-playwright
    container_name: price_monitor_scheduler
    command: python -m scheduler.main
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/app
      - browser_cache:/app/.cache
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: bot-playwright
    container_name: price_monitor_worker
    command: celery -A scheduler.celery_app worker --loglevel=info
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/app
      - browser_cache:/app/.cache
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G

volumes:
  postgres_data:
  browser_cache:
